#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&lt { quick-tap-ms = <150>; };

&mt {
    flavor = "tap-preferred";
    require-prior-idle-ms = <125>;
};

&sk { lazy; };

/ {
    behaviors {
        toggle_mod_off: toggle_mod_off {
            compatible = "zmk,behavior-key-toggle";
            #binding-cells = <1>;
            display-name = "Key Toggle Off";
            toggle-mode = "off";
        };

        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            require-prior-idle-ms = <105>;
            flavor = "balanced";
            hold-trigger-key-positions = <23 24 25 26 7 22 36 45 46 47 37 38 39 40 41 8 9 10 11 12 23 24 25 26 27 42 43 44>;
            hold-trigger-on-release;
            quick-tap-ms = <175>;
            label = "homerow mods left from urob";
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            require-prior-idle-ms = <105>;
            flavor = "balanced";
            hold-trigger-on-release;
            quick-tap-ms = <175>;
            label = "homerow mods right from urob";
            hold-trigger-key-positions = <47 46 45 44 43 42 33 0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33 42 43 44>;
        };

        FUN_COLON_SEMI: FUN_COLON_SEMI {
            compatible = "zmk,behavior-hold-tap";
            label = "FUN_COLON_SEMI";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        leader_1: leader_1 {
            compatible = "zmk,behavior-leader-key";
            #binding-cells = <0>;

            ctl-prs {
                sequence = <E R>;
                bindings = <&kp LC(PRINTSCREEN)>;
            };

            prs {
                sequence = <F E>;
                bindings = <&kp PRINTSCREEN>;
            };

            nav {
                sequence = <SPACE>;
                bindings = <&to 9>;
            };

            med {
                sequence = <TAB>;
                bindings = <&to 4>;
            };

            cap {
                sequence = <COLON>;
                bindings = <&caps_word>;
            };

            win {
                sequence = <A>;
                bindings = <&kt LWIN>;
            };

            alt {
                sequence = <S>;
                bindings = <&kt LALT>;
            };

            ctl {
                sequence = <D>;
                bindings = <&kt LCTRL>;
            };

            sft {
                sequence = <F>;
                bindings = <&kt LSHFT>;
            };
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    combos {
        compatible = "zmk,combos";

        lb {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <3 2>;
        };

        rb {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <9 10>;
        };

        bootloader {
            bindings = <&bootloader>;
            key-positions = <0 28>;
        };

        reset {
            bindings = <&sys_reset>;
            key-positions = <13 28>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <17 32>;
        };

        bksp {
            bindings = <&kp BACKSPACE>;
            key-positions = <16 32>;
        };

        del {
            bindings = <&kp DEL>;
            key-positions = <16 30>;
        };

        lock_lnav {
            bindings = <&tog 8>;
            key-positions = <30 16 32>;
            layers = <2 8 0 1>;
        };

        tog_num {
            bindings = <&tog 5>;
            key-positions = <15 3 17>;
            timeout-ms = <25>;
            require-prior-idle-ms = <10>;
            layers = <5 0 1>;
        };

        tog_sym {
            bindings = <&tog 6>;
            key-positions = <2 16 4>;
            timeout-ms = <25>;
            require-prior-idle-ms = <10>;
            layers = <6 0 1>;
        };

        lock_mou {
            bindings = <&tog 3>;
            key-positions = <15 31 17>;
            layers = <0 1 3>;
        };

        n1 {
            bindings = <&kp N1>;
            key-positions = <16 17>;
            timeout-ms = <20>;
            layers = <0>;
        };

        n2 {
            bindings = <&kp N2>;
            key-positions = <24 23>;
            timeout-ms = <20>;
            layers = <0>;
        };

        n3 {
            bindings = <&kp N3>;
            key-positions = <16 15>;
            timeout-ms = <20>;
            layers = <0>;
        };

        n4 {
            bindings = <&kp N4>;
            key-positions = <25 24>;
            timeout-ms = <20>;
        };

        n5 {
            bindings = <&kp N5>;
            key-positions = <15 14>;
            timeout-ms = <20>;
        };

        n6 {
            bindings = <&kp N6>;
            key-positions = <26 25>;
            timeout-ms = <20>;
        };

        n7 {
            bindings = <&kp N7>;
            key-positions = <32 31>;
            timeout-ms = <20>;
        };

        n8 {
            bindings = <&kp N8>;
            key-positions = <37 38>;
            timeout-ms = <20>;
        };

        n9 {
            bindings = <&kp N9>;
            key-positions = <31 30>;
            timeout-ms = <20>;
        };

        n0 {
            bindings = <&kp N0>;
            key-positions = <38 39>;
            timeout-ms = <20>;
        };

        caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <17 23>;
        };

        colon {
            bindings = <&kp SEMICOLON>;
            key-positions = <23 37>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        home {
            display-name = "home";
            bindings = <
&kp GRAVE                &kp Q        &kp W        &kp E         &kp R         &kp T                         &kp UP_ARROW             &kp Y        &kp U            &kp I         &kp O        &kp P          &kp EQUAL
&FUN_COLON_SEMI 7 COLON  &kp A        &kp S        &kp D         &kp F         &kp G               &kp LEFT  &tog 1        &kp RIGHT  &kp H        &kp J            &kp K         &kp L        &kp SQT  &kp MINUS
&leader_1                &hml LWIN Z  &hml LALT X  &hml LCTRL C  &hml LSHFT V  &kp B      &to 0              &kp DOWN                 &kp N        &hmr LSHFT M     &hmr LCTRL COMMA &hmr LALT DOT  &hmr LGUI FSLH       &kp BACKSLASH
                                                   &lt 4 ESCAPE  &lt 2 SPACE   &lt 2 TAB                                              &lt 6 ENTER  &lt 5 BACKSPACE  &lt 7 DELETE
            >;

            sensor-bindings = <&inc_dec_kp RIGHT LEFT>;
        };

        mir {
            bindings = <
&kp EQUAL  &kp P         &kp O       &kp I         &kp U            &kp Y                         &trans          &trans  &trans  &trans  &trans  &trans  &trans
&kp MINUS  &mt LGUI SQT  &mt LALT L  &mt LCTRL K   &mt LSHFT J      &kp H                 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&kp BSLH   &kp FSLH      &kp DOT     &kp COMMA     &kp M            &kp N        &to 0            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                     &lt 7 DELETE  &lt 5 BACKSPACE  &lt 6 ENTER                                   &trans  &trans  &trans
            >;

            label = "mirror";
            sensor-bindings = <&inc_dec_kp UP_ARROW DOWN>;
        };

        nav {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans                   &trans          &trans      &kp HOME       &kp UP_ARROW  &kp END        &trans     &trans
&trans  &sk LGUI  &sk LALT  &sk LCTRL  &sk LSHFT  &trans           &trans  &trans  &trans  &none       &kp LEFT       &kp DOWN      &kp RIGHT      &kp RIGHT  &trans
&trans  &trans    &trans    &trans     &trans     &trans  &to 0            &trans          &kp INSERT  &kp PAGE_UP    &trans        &kp PAGE_DOWN  &trans     &trans
                            &trans     &trans     &trans                                   &kp ENTER   &kp BACKSPACE  &kp DELETE
            >;

            label = "nav";
        };

        mou {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans                   &trans          &kp LC(Y)  &msc SCRL_UP    &mmv MOVE_UP    &msc SCRL_DOWN   &kp LC(Z)        &trans
&trans  &sk LGUI  &sk LALT  &sk LCTRL  &sk LSHFT  &trans           &trans  &trans  &trans  &trans     &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mmv MOVE_RIGHT  &trans
&trans  &trans    &trans    &trans     &trans     &trans  &to 0            &trans          &trans     &msc SCRL_LEFT  &none           &msc SCRL_RIGHT  &msc SCRL_RIGHT  &trans
                            &trans     &trans     &trans                                   &mkp RCLK  &mkp LCLK       &mkp MCLK
            >;

            label = "mouse";
        };

        med {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans                   &trans          &rgb_ug RGB_TOG  &rgb_ug RGB_EFF   &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_SPI  &rgb_ug RGB_BRI
&trans  &sk LGUI  &sk LALT  &sk LCTRL  &sk LSHFT  &trans           &trans  &trans  &trans  &trans           &kp C_PREVIOUS    &kp C_VOL_DN     &kp C_VOL_UP     &kp C_NEXT       &bt BT_CLR
&trans  &trans    &trans    &trans     &trans     &trans  &to 0            &trans          &trans           &bt BT_SEL 0      &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4
                            &trans     &trans     &trans                                   &kp C_STOP       &kp C_PLAY_PAUSE  &kp C_MUTE
            >;

            label = "media";
        };

        num {
            bindings = <
&trans  &trans   &kp N7  &kp N8  &kp N9  &trans                     &kp PAGE_UP             &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp N0   &kp N4  &kp N5  &kp N6  &trans           &kp HOME  &trans         &kp END  &trans  &sk LSHFT  &sk LCTRL  &sk LALT  &sk LGUI  &trans
&trans  &kp DOT  &kp N1  &kp N2  &kp N3  &trans  &to 0              &kp PAGE_DOWN           &trans  &trans     &trans     &trans    &trans    &trans
                         &trans  &kp N0  &trans                                             &trans  &trans     &trans
            >;

            label = "num";
            sensor-bindings = <&inc_dec_kp DOWN UP_ARROW>;
        };

        sym {
            bindings = <
&trans  &kp LEFT_BRACE  &kp AMPERSAND    &kp ASTERISK          &kp LEFT_PARENTHESIS   &kp RIGHT_BRACE                   &trans          &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp COLON       &kp DOLLAR       &kp PERCENT           &kp CARET              &kp PLUS                  &trans  &trans  &trans  &trans  &sk LSHFT  &sk LCTRL  &sk LALT  &sk LGUI  &trans
&trans  &kp TILDE       &kp EXCLAMATION  &kp AT_SIGN           &kp HASH               &kp PIPE         &to 0            &trans          &trans  &trans     &trans     &trans    &trans    &trans
                                         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UNDERSCORE                                    &trans  &trans     &trans
            >;

            label = "sym";
        };

        fun {
            bindings = <
&trans  &kp F12  &kp F7  &kp F8      &kp F9     &kp PSCRN                         &trans          &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp F11  &kp F4  &kp F5      &kp F6     &kp SCROLLLOCK            &trans  &trans  &trans  &trans  &sk LSHFT  &sk LCTRL  &sk LALT  &sk LGUI  &trans
&trans  &kp F10  &kp F1  &kp F2      &kp F3     &kp PAUSE_BREAK  &to 0            &trans          &trans  &trans     &trans     &trans    &trans    &trans
                         &kp C_MENU  &kp SPACE  &kp TAB                                           &trans  &trans     &trans
            >;

            label = "fun";
        };

        lnav {
            bindings = <
&trans  &trans  &kp HOME   &kp UP      &kp END    &trans                      &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LEFT   &kp DOWN    &kp RIGHT  &kp CAPS            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp PG_UP  &trans      &kp PG_DN  &kp INS    &to 0            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                           &kp DELETE  &kp BSPC   &kp ENTER                                   &trans  &trans  &trans
            >;

            label = "l_nav";
            sensor-bindings = <&inc_dec_kp RIGHT LEFT>;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};

