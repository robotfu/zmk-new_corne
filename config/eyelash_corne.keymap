#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&lt { quick-tap-ms = <150>; };

&mt {
    flavor = "tap-preferred";
    require-prior-idle-ms = <125>;
};

&sk { lazy; };

/ {
    behaviors {
        toggle_mod_off: toggle_mod_off {
            compatible = "zmk,behavior-key-toggle";
            #binding-cells = <1>;
            display-name = "Key Toggle Off";
            toggle-mode = "off";
        };

        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            require-prior-idle-ms = <105>;
            flavor = "balanced";
            hold-trigger-key-positions = <23 24 25 26 7 22 36 45 46 47 37 38 39 40 41 8 9 10 11 12 23 24 25 26 27 42 43 44>;
            hold-trigger-on-release;
            quick-tap-ms = <175>;
            label = "homerow mods left from urob";
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            require-prior-idle-ms = <105>;
            flavor = "balanced";
            hold-trigger-on-release;
            quick-tap-ms = <175>;
            label = "homerow mods right from urob";
            hold-trigger-key-positions = <47 46 45 44 43 42 33 0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33 42 43 44>;
        };

        leader_1: leader_1 {
            compatible = "zmk,behavior-leader-key";
            #binding-cells = <0>;

            ctl-prs {
                sequence = <E R>;
                bindings = <&kp LC(PRINTSCREEN)>;
            };

            win {
                sequence = <A>;
                bindings = <&kt LWIN>;
            };

            alt {
                sequence = <S>;
                bindings = <&kt LALT>;
            };

            ctl {
                sequence = <D>;
                bindings = <&kt LCTRL>;
            };

            sft {
                sequence = <F>;
                bindings = <&kt LSHFT>;
            };
        };

        colon_semi: colon_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "COLON_SEMI";
            bindings = <&kp COLON>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    combos {
        compatible = "zmk,combos";

        /* 括号与符号 (Parentheses & Symbols) */

        lp: lp {
            bindings = <&kp LPAR>;
            key-positions = <4 16>;
        };

        rp: rp {
            bindings = <&kp RPAR>;
            key-positions = <3 17>;
        };

        lb: lb {
            bindings = <&kp LBKT>;
            key-positions = <3 15>;
        };

        rb: rb {
            bindings = <&kp RBKT>;
            key-positions = <2 16>;
        };

        lbb: lbb {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <2 14>;
        };

        rbb: rbb {
            bindings = <&kp RBRC>;
            key-positions = <1 15>;
        };

        /* 常用编辑键 (Common Editing Keys) */

        enter: enter {
            bindings = <&kp ENTER>;
            key-positions = <32 31>;
        };

        bksp: bksp {
            bindings = <&kp BACKSPACE>;
            key-positions = <16 32>;
        };

        del: del {
            bindings = <&kp DEL>;
            key-positions = <16 30>;
        };

        caps: caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <17 23>;
        };

        /* 修饰键 (Modifier Keys) */

        sk_ctl: sk_ctl {
            bindings = <&sk LCTRL>;
            key-positions = <43 16>;
        };

        sk_alt: sk_alt {
            bindings = <&sk LALT>;
            key-positions = <43 15>;
        };

        sk_win: sk_win {
            bindings = <&sk LWIN>;
            key-positions = <43 14>;
        };

        sk_sft: sk_sft {
            bindings = <&sk LSHFT>;
            key-positions = <17 43>;
        };

        /* 数字输入 (Number Input) */

        n6_l: n6_l {
            bindings = <&kp N6>;
            key-positions = <17 16>;
            layers = <8>;
        };

        n7_l: n7_l {
            bindings = <&kp N7>;
            key-positions = <15 16>;
            layers = <8>;
        };

        n8_l: n8_l {
            bindings = <&kp N8>;
            key-positions = <14 15>;
            layers = <8>;
        };

        n9_l: n9_l {
            bindings = <&kp N9>;
            key-positions = <17 15>;
            layers = <8>;
        };

        n0_l: n0_l {
            bindings = <&kp N0>;
            key-positions = <14 16>;
            layers = <8>;
        };

        /* 图层切换 (Layer Switching) */

        lock_lnav: lock_lnav {
            bindings = <&tog 0>;
            key-positions = <30 16 32>;
            layers = <2 0>;
        };

        tog_num: tog_num {
            bindings = <&tog 5>;
            key-positions = <15 3 17>;
            timeout-ms = <25>;
            require-prior-idle-ms = <10>;
            layers = <5 0>;
        };

        tog_sym: tog_sym {
            bindings = <&tog 6>;
            key-positions = <2 16 4>;
            timeout-ms = <25>;
            require-prior-idle-ms = <10>;
            layers = <6 0>;
        };

        lock_mou: lock_fun {
            bindings = <&tog 3>;
            key-positions = <15 31 17>;
            layers = <0 3>;
        };

        /* 系统与固件功能 (System & Firmware Functions) */

        bootloader_combo: bootloader_combo {
            bindings = <&bootloader>;
            key-positions = <0 28>;
        };

        reset_combo: reset_combo {
            bindings = <&sys_reset>;
            key-positions = <13 28>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <31 30>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <29 30>;
        };

        n1_l {
            bindings = <&kp N1>;
            key-positions = <16 17>;
        };

        n2_l {
            bindings = <&kp N2>;
            key-positions = <16 15>;
        };

        n3_l {
            bindings = <&kp NUMBER_3>;
            key-positions = <15 14>;
        };

        n4_l {
            bindings = <&kp N4>;
            key-positions = <17 15>;
        };

        n5_l {
            bindings = <&kp N5>;
            key-positions = <14 16>;
        };

        f24 {
            bindings = <&kp F24>;
            key-positions = <14 17>;
        };

        lock_v {
            bindings = <&to 1>;
            key-positions = <32 43>;
            layers = <0>;
        };

        unlock_v {
            bindings = <&to 0>;
            key-positions = <32 43>;
            layers = <1>;
        };

        semi {
            bindings = <&kp SEMI>;
            key-positions = <4 17>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        home {
            display-name = "home";
            bindings = <
&kp GRAVE  &lt 7 Q      &kp W        &kp E         &kp R         &kp T                     &kp UP_ARROW             &kp Y  &kp U            &kp I         &kp O        &kp P          &kp EQUAL
&kp COLON  &hml LWIN A  &hml LALT S  &hml LCTRL D  &hml LSHFT F  &kp G           &kp LEFT  &tog 0        &kp RIGHT  &kp H  &hmr LSHFT J     &hmr LCTRL K  &hmr LALT L  &hmr LWIN SQT  &kp MINUS
&leader_1  &lt 5 Z      &kp X        &lt 4 C       &lt 1 V       &kp B  &to 0              &kp DOWN                 &kp N  &lt 6 M          &lt 7 COMMA   &kp DOT      &kp SLASH      &kp BACKSLASH
                                     &none         &lt 8 SPACE   &none                                              &none  &lt 5 BACKSPACE  &none
            >;

            sensor-bindings = <&inc_dec_kp RIGHT LEFT>;
        };

        mir {
            bindings = <
&trans  &kp Y  &kp U  &kp I   &kp O   &kp P                     &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp H  &kp J  &kp K   &kp L   &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp N  &kp M  &to 1   &to 0   &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                      &trans  &trans  &trans                                    &trans  &trans  &trans
            >;
        };

        nav {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans                   &trans          &trans      &kp HOME       &kp UP_ARROW  &kp END        &trans  &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans           &trans  &trans  &trans  &trans      &kp LEFT       &kp DOWN      &kp RIGHT      &trans  &trans
&trans  &trans    &trans    &trans     &trans     &trans  &to 0            &trans          &kp INSERT  &kp PAGE_UP    &trans        &kp PAGE_DOWN  &trans  &trans
                            &trans     &trans     &trans                                   &kp ENTER   &kp BACKSPACE  &kp DELETE
            >;

            label = "nav";
        };

        mou {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans                   &trans          &kp LC(Y)  &msc SCRL_UP    &mmv MOVE_UP    &msc SCRL_DOWN   &kp LC(Z)        &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans           &trans  &trans  &trans  &trans     &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mmv MOVE_RIGHT  &trans
&trans  &trans    &trans    &trans     &trans     &trans  &to 0            &trans          &trans     &msc SCRL_LEFT  &none           &msc SCRL_RIGHT  &msc SCRL_RIGHT  &trans
                            &trans     &trans     &trans                                   &mkp RCLK  &mkp LCLK       &mkp MCLK
            >;

            label = "mouse";
        };

        med {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans                   &trans          &rgb_ug RGB_TOG  &rgb_ug RGB_EFF   &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_SPI  &rgb_ug RGB_BRI
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans           &trans  &trans  &trans  &trans           &kp C_PREVIOUS    &kp C_VOL_DN     &kp C_VOL_UP     &kp C_NEXT       &bt BT_CLR
&trans  &trans    &trans    &trans     &trans     &trans  &to 0            &trans          &trans           &bt BT_SEL 0      &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4
                            &trans     &trans     &trans                                   &kp C_STOP       &kp C_PLAY_PAUSE  &kp C_MUTE
            >;

            label = "media";
        };

        num {
            bindings = <
&trans  &trans  &kp N7  &kp N8  &kp N9  &trans                     &kp PAGE_UP             &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp N0  &kp N4  &kp N5  &kp N6  &trans           &kp HOME  &trans         &kp END  &trans  &sk LSHFT  &sk LCTRL  &sk LALT  &sk LGUI  &trans
&trans  &none   &kp N1  &kp N2  &kp N3  &trans  &to 0              &kp PAGE_DOWN           &trans  &trans     &trans     &trans    &trans    &trans
                        &trans  &kp N0  &trans                                             &trans  &trans     &trans
            >;

            label = "num";
            sensor-bindings = <&inc_dec_kp DOWN UP_ARROW>;
        };

        sym {
            bindings = <
&trans  &kp LEFT_BRACE  &kp AMPERSAND    &kp ASTERISK          &kp LEFT_PARENTHESIS   &kp RIGHT_BRACE                   &trans          &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp COLON       &kp DOLLAR       &kp PERCENT           &kp CARET              &kp PLUS                  &trans  &trans  &trans  &trans  &sk LSHFT  &sk LCTRL  &sk LALT  &sk LGUI  &trans
&trans  &kp TILDE       &kp EXCLAMATION  &kp AT_SIGN           &kp HASH               &kp PIPE         &to 0            &trans          &trans  &trans     &trans     &trans    &trans    &trans
                                         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UNDERSCORE                                    &trans  &trans     &trans
            >;

            label = "sym";
        };

        fun {
            bindings = <
&trans  &kp F12  &kp F7  &kp F8      &kp F9   &kp PSCRN                         &trans          &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp F11  &kp F4  &kp F5      &kp F6   &kp SCROLLLOCK            &trans  &trans  &trans  &trans  &sk LSHFT  &sk LCTRL  &sk LALT  &sk LGUI  &trans
&trans  &kp F10  &kp F1  &kp F2      &kp F3   &kp PAUSE_BREAK  &to 0            &trans          &trans  &trans     &trans     &trans    &trans    &trans
                         &kp C_MENU  &kp F12  &kp TAB                                           &trans  &trans     &trans
            >;

            label = "fun";
        };

        lnav {
            bindings = <
&trans  &trans  &kp HOME   &kp UP    &kp END    &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LEFT   &kp DOWN  &kp RIGHT  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp PG_UP  &trans    &kp PG_DN  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                           &trans    &none      &trans                                    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
