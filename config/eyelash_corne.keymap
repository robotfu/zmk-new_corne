#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&lt { quick-tap-ms = <150>; };

&mt {
    flavor = "tap-preferred";
    require-prior-idle-ms = <125>;
};

&sk { lazy; };

/ {
    behaviors {
        kt_off: key_toggle_off_only {
            compatible = "zmk,behavior-key-toggle";
            #binding-cells = <1>;
            label = "KEY_TOGGLE_OFF_ONLY";
            toggle-mode = "off";
        };

        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            require-prior-idle-ms = <105>;
            flavor = "balanced";
            hold-trigger-key-positions = <23 24 25 26 7 22 36 45 46 47 37 38 39 40 41 8 9 10 11 12 23 24 25 26 27 42 43 44>;
            hold-trigger-on-release;
            quick-tap-ms = <175>;
            label = "homerow mods left from urob";
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            require-prior-idle-ms = <105>;
            flavor = "balanced";
            hold-trigger-on-release;
            quick-tap-ms = <175>;
            label = "homerow mods right from urob";
            hold-trigger-key-positions = <47 46 45 44 43 42 33 0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33 42 43 44>;
        };

        leader_1: leader_1 {
            compatible = "zmk,behavior-leader-key";
            #binding-cells = <0>;

            ctl-prs {
                sequence = <E R>;
                bindings = <&kp LC(PRINTSCREEN)>;
            };

            win {
                sequence = <A>;
                bindings = <&kt LWIN>;
            };

            alt {
                sequence = <S>;
                bindings = <&kt LALT>;
            };

            ctl {
                sequence = <D>;
                bindings = <&kt LCTRL>;
            };

            sft {
                sequence = <F>;
                bindings = <&kt LSHFT>;
            };
        };

        alt_shift_dance: alt_shift_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "ALT_SHIFT_DANCE";
            #binding-cells = <0>;
            bindings = <&mt LEFT_ALT A>, <&mt LEFT_SHIFT A>;
        };

        num_fkey: num_fkey {
            compatible = "zmk,behavior-hold-tap";
            label = "NUM_FKEY";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    combos {
        compatible = "zmk,combos";

        space {
            bindings = <&kp SPACE>;
            key-positions = <17 16>;
            require-prior-idle-ms = <30>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <15 16>;
            require-prior-idle-ms = <30>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <14 15>;
            require-prior-idle-ms = <30>;
        };

        enter: enter {
            bindings = <&kp ENTER>;
            key-positions = <17 15 16>;
            require-prior-idle-ms = <30>;
        };

        bksp: bksp {
            bindings = <&kp BACKSPACE>;
            key-positions = <16 32>;
            require-prior-idle-ms = <30>;
        };

        del: del {
            bindings = <&kp DEL>;
            key-positions = <16 30>;
            require-prior-idle-ms = <30>;
        };

        key_repeat {
            bindings = <&key_repeat>;
            key-positions = <14 15 16>;
            require-prior-idle-ms = <30>;
        };

        n1_l {
            bindings = <&num_fkey F1 NUMBER_1>;
            key-positions = <31 32>;
            require-prior-idle-ms = <30>;
        };

        n2_l {
            bindings = <&num_fkey F2 NUMBER_2>;
            key-positions = <31 30>;
            require-prior-idle-ms = <30>;
        };

        n3_l {
            bindings = <&num_fkey F3 NUMBER_3>;
            key-positions = <30 29>;
            require-prior-idle-ms = <30>;
        };

        n4_l {
            bindings = <&num_fkey F4 NUMBER_4>;
            key-positions = <30 32>;
            require-prior-idle-ms = <30>;
        };

        n5_l {
            bindings = <&num_fkey F5 NUMBER_5>;
            key-positions = <29 31>;
            require-prior-idle-ms = <30>;
        };

        n6_l: n6_l {
            bindings = <&num_fkey F6 NUMBER_6>;
            key-positions = <3 2>;
            require-prior-idle-ms = <30>;
        };

        n7_l: n7_l {
            bindings = <&num_fkey F7 NUMBER_7>;
            key-positions = <2 1>;
            require-prior-idle-ms = <30>;
        };

        n8_l: n8_l {
            bindings = <&num_fkey F8 NUMBER_8>;
            key-positions = <2 4>;
            require-prior-idle-ms = <30>;
        };

        n9_l: n9_l {
            bindings = <&num_fkey F9 NUMBER_9>;
            key-positions = <1 3>;
            require-prior-idle-ms = <30>;
        };

        n0_l: n0_l {
            bindings = <&num_fkey F10 NUMBER_0>;
            key-positions = <3 4>;
            timeout-ms = <15>;
            require-prior-idle-ms = <30>;
        };

        f11 {
            bindings = <&kp F11>;
            key-positions = <4 3 2>;
            require-prior-idle-ms = <30>;
        };

        f12 {
            bindings = <&kp F12>;
            key-positions = <2 1 3>;
            require-prior-idle-ms = <30>;
        };

        lp: lp {
            bindings = <&kp LPAR>;
            key-positions = <23 9>;
            require-prior-idle-ms = <30>;
        };

        rp: rp {
            bindings = <&kp RPAR>;
            key-positions = <9 25>;
            timeout-ms = <10>;
            require-prior-idle-ms = <30>;
        };

        lb: lb {
            bindings = <&kp LBKT>;
            key-positions = <10 24>;
            require-prior-idle-ms = <30>;
        };

        rb: rb {
            bindings = <&kp RBKT>;
            key-positions = <10 26>;
            require-prior-idle-ms = <30>;
        };

        lbb: lbb {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <23 10>;
            require-prior-idle-ms = <30>;
        };

        rbb: rbb {
            bindings = <&kp RBRC>;
            key-positions = <9 26>;
            require-prior-idle-ms = <30>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <23 24>;
            require-prior-idle-ms = <30>;
        };

        semi {
            bindings = <&kp SEMI>;
            key-positions = <25 24>;
            require-prior-idle-ms = <30>;
        };

        r1 {
            bindings = <&kp EXCLAMATION>;
            key-positions = <37 38>;
            require-prior-idle-ms = <30>;
        };

        r2 {
            bindings = <&kp AT_SIGN>;
            key-positions = <38 39>;
            require-prior-idle-ms = <30>;
        };

        r3 {
            bindings = <&kp HASH>;
            key-positions = <39 40>;
            require-prior-idle-ms = <30>;
        };

        r4 {
            bindings = <&kp DOLLAR>;
            key-positions = <37 39>;
            require-prior-idle-ms = <30>;
        };

        r5 {
            bindings = <&kp PERCENT>;
            key-positions = <40 38>;
            require-prior-idle-ms = <30>;
        };

        r6 {
            bindings = <&kp CARET>;
            key-positions = <9 10>;
            require-prior-idle-ms = <30>;
        };

        r7 {
            bindings = <&kp AMPERSAND>;
            key-positions = <10 11>;
            require-prior-idle-ms = <30>;
        };

        r8 {
            bindings = <&kp ASTERISK>;
            key-positions = <10 8>;
            timeout-ms = <15>;
            require-prior-idle-ms = <30>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <17 15>;
            require-prior-idle-ms = <30>;
        };

        quote {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <25 26>;
            require-prior-idle-ms = <30>;
        };

        less_than {
            bindings = <&kp LESS_THAN>;
            key-positions = <23 25>;
            require-prior-idle-ms = <30>;
        };

        greater_than {
            bindings = <&kp GREATER_THAN>;
            key-positions = <24 26>;
            require-prior-idle-ms = <30>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <23 26>;
            require-prior-idle-ms = <30>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <24 37>;
            require-prior-idle-ms = <30>;
        };

        minor {
            bindings = <&kp EQUAL>;
            key-positions = <24 39>;
            require-prior-idle-ms = <30>;
        };

        tilde {
            bindings = <&kp TILDE>;
            key-positions = <14 16>;
            require-prior-idle-ms = <30>;
        };

        f24 {
            bindings = <&kp F24>;
            key-positions = <14 17>;
            require-prior-idle-ms = <30>;
        };

        number {
            bindings = <&tog 5>;
            key-positions = <29 32>;
            require-prior-idle-ms = <30>;
        };

        mir {
            bindings = <&tog 1>;
            key-positions = <1 4>;
            require-prior-idle-ms = <30>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <23 39>;
            require-prior-idle-ms = <30>;
        };

        equal {
            bindings = <&kp MINUS>;
            key-positions = <25 38>;
            require-prior-idle-ms = <30>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <25 40>;
            require-prior-idle-ms = <30>;
        };

        reset {
            bindings = <&sys_reset>;
            key-positions = <1 29>;
            require-prior-idle-ms = <30>;
        };

        ins {
            bindings = <&kp INSERT>;
            key-positions = <15 29>;
            require-prior-idle-ms = <30>;
        };

        caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <17 23>;
            require-prior-idle-ms = <30>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        home {
            display-name = "home";
            bindings = <
&tog 1   &hml F11 Q  &hml F12 W           &hml F13 E       &hml F14 R        &hml F15 T                      &kt LSHIFT                  &hml F16 Y  &hml F17 U        &hml F18 I       &hml F19 O             &hml F20 P                   &kp EQUAL
&kp F24  &lt 2 A     &hml LALT S          &hml LCTRL D     &hml LSHFT F      &kp G                &kt LCTRL  &tog 0        &kt LEFT_ALT  &kp H       &hmr LSHFT J      &hmr LCTRL K     &hmr LALT L            &hmr F23 SQT                 &kp MINUS
&tog 5   &lt 5 Z     &hml LC(LEFT_ALT) X  &hml LEFT_WIN C  &hml LC(LSHFT) V  &lt 8 B     &to 0               &kt LEFT_WIN                &kp N       &hmr LC(LSHFT) M  &hmr LWIN COMMA  &hmr LC(LEFT_ALT) DOT  &hmr LC(LS(LEFT_ALT)) SLASH  &kp BACKSLASH
                                          &none            &none             &none                                                       &none       &none             &none
            >;

            sensor-bindings = <&inc_dec_kp RIGHT LEFT>;
        };

        mir {
            bindings = <
&trans  &kp Y  &kp U  &kp I      &kp O       &kp P                        &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp H  &kp J  &kp K      &kp L       &kp SQT              &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp N  &kp M  &kp COMMA  &kp PERIOD  &kp SLASH  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                      &trans     &trans      &trans                                       &trans  &trans  &trans
            >;

            label = "mir";
        };

        nav {
            bindings = <
&trans  &trans  &kp HOME  &kp UP     &kp END    &kp PG_UP                   &trans          &trans  &trans     &trans     &trans        &trans    &trans
&trans  &none   &kp LEFT  &kp DOWN   &kp RIGHT  &kp PG_DN           &trans  &trans  &trans  &trans  &kp LSHFT  &kp LCTRL  &kp LEFT_ALT  &kp LGUI  &trans
&trans  &trans  &kp INS   &kp LCTRL  &trans     &trans     &to 0            &trans          &trans  &trans     &trans     &trans        &trans    &trans
                          &trans     &trans     &trans                                      &trans  &trans     &trans
            >;

            label = "nav";
        };

        mou {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans                   &trans          &kp LC(Y)  &msc SCRL_UP    &mmv MOVE_UP    &msc SCRL_DOWN   &kp LC(Z)        &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans           &trans  &trans  &trans  &trans     &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mmv MOVE_RIGHT  &trans
&trans  &trans    &trans    &trans     &trans     &trans  &to 0            &trans          &trans     &msc SCRL_LEFT  &none           &msc SCRL_RIGHT  &msc SCRL_RIGHT  &trans
                            &trans     &trans     &trans                                   &mkp RCLK  &mkp LCLK       &mkp MCLK
            >;

            label = "mouse";
        };

        med {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans                   &trans          &rgb_ug RGB_TOG  &rgb_ug RGB_EFF   &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_SPI  &rgb_ug RGB_BRI
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans           &trans  &trans  &trans  &trans           &kp C_PREVIOUS    &kp C_VOL_DN     &kp C_VOL_UP     &kp C_NEXT       &bt BT_CLR
&trans  &trans    &trans    &trans     &trans     &trans  &to 0            &trans          &trans           &bt BT_SEL 0      &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4
                            &trans     &trans     &trans                                   &kp C_STOP       &kp C_PLAY_PAUSE  &kp C_MUTE
            >;

            label = "media";
        };

        num {
            bindings = <
&trans  &trans  &kp N7  &kp N8  &kp N9  &trans                     &kp PAGE_UP             &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp N0  &kp N4  &kp N5  &kp N6  &trans           &kp HOME  &trans         &kp END  &trans  &sk LSHFT  &sk LCTRL  &sk LALT  &sk LGUI  &trans
&trans  &kp N0  &kp N1  &kp N2  &kp N3  &kp N0  &to 0              &kp PAGE_DOWN           &trans  &trans     &trans     &trans    &trans    &trans
                        &trans  &trans  &trans                                             &trans  &trans     &trans
            >;

            label = "num";
            sensor-bindings = <&inc_dec_kp DOWN UP_ARROW>;
        };

        sym {
            bindings = <
&trans  &kp LEFT_BRACE  &kp AMPERSAND    &kp ASTERISK          &kp LEFT_PARENTHESIS   &kp RIGHT_BRACE                   &trans          &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp COLON       &kp DOLLAR       &kp PERCENT           &kp CARET              &kp PLUS                  &trans  &trans  &trans  &trans  &sk LSHFT  &sk LCTRL  &sk LALT  &sk LGUI  &trans
&trans  &kp TILDE       &kp EXCLAMATION  &kp AT_SIGN           &kp HASH               &kp PIPE         &to 0            &trans          &trans  &trans     &trans     &trans    &trans    &trans
                                         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UNDERSCORE                                    &trans  &trans     &trans
            >;

            label = "sym";
        };

        fun {
            bindings = <
&trans  &kp F12  &kp F7  &kp F8      &kp F9   &kp PSCRN                         &trans          &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp F11  &kp F4  &kp F5      &kp F6   &kp SCROLLLOCK            &trans  &trans  &trans  &trans  &sk LSHFT  &sk LCTRL  &sk LALT  &sk LGUI  &trans
&trans  &kp F10  &kp F1  &kp F2      &kp F3   &kp PAUSE_BREAK  &to 0            &trans          &trans  &trans     &trans     &trans    &trans    &trans
                         &kp C_MENU  &kp F12  &kp TAB                                           &trans  &trans     &trans
            >;

            label = "fun";
        };

        rgb {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans           &rgb_ug RGB_BRD  &rgb_ug RGB_HUD                 &rgb_ug RGB_SAD  &rgb_ug RGB_SPD  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &rgb_ug RGB_TOG  &rgb_ug RGB_BRI  &rgb_ug RGB_HUI                 &rgb_ug RGB_SAI  &rgb_ug RGB_SPI  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans           &rgb_ug RGB_EFR  &rgb_ug RGB_COLOR_HSB(0,0,100)  &trans           &rgb_ug RGB_EFF  &trans
                        &trans  &trans  &trans                                    &trans           &trans           &trans
            >;

            label = "rgb";
        };

        sk {
            bindings = <
&trans  &trans  &trans        &trans     &trans     &trans                    &trans          &trans  &trans     &trans     &trans        &trans  &trans
&trans  &trans  &sk LEFT_ALT  &sk LCTRL  &sk LSHFT  &none             &trans  &trans  &trans  &trans  &sk LSHFT  &sk LCTRL  &sk LEFT_ALT  &trans  &trans
&trans  &trans  &trans        &trans     &trans     &trans  &trans            &trans          &trans  &trans     &trans     &trans        &trans  &trans
                              &trans     &trans     &trans                                    &trans  &trans     &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
